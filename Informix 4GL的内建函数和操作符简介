4gl的内建函数和操作符简介
分类：
Informix4GL
==============================================FIELD_TOUCHED(field) :如果用户改变了荧幕中 field 域，它就返回TRUE。
==============================================GET_FLDBUF(field_list) :返回一个或多个域的字符值。
==============================================FGL_LASTKEY() : 返回符合最近的键击的整数值（ASCII数值）。
==============================================INFIELD(field) : 如果给定的域是荧幕的当前域，就返回TRUE。
==============================================ARR_CURR() : 返回程序阵列的当前记录号。这在求当前阵列各域值时特别有用。
==============================================ARR_COUNT() : 返回程序阵列个数。
==============================================SCR_LINE() : 返回游标在荧幕阵列的行号。
==============================================SET_COUNT(field_rows) : 告诉4GL要有多少行阵列要显示或输入。要显示或输入阵列是必须先调用它。
==============================================ARG_VAL(int_expr) :
==============================================DOWNSHIFT(char_expr) : 字符串转换成小写字母。
「博学谷」python在线培训，实时新增前沿技术
广告 博学谷python在线培训学习【web开发+人工智能+自动化测试+运维】等多种技能 查看详情 >

 ==============================================UPSHIFT(char_expr) : 字符串转换成大写字母。  
 ==============================================ERR_GET(int_expr) :   
 ==============================================ERR_PRINT(int_expr) :   
 ==============================================ERR_QUIT(int_expr)  :       关于错误号码 int_expr 的处理。  
 ==============================================ERRORLOG(char_expr)  :   记录用字串 char_expr 表示的错误log。   
 ==============================================STARTLOG(char_expr)  :  开始log。   
 ==============================================FGL_GETENV(char_expr)  :  给出用 char_expr 表示的环境变量的值。如 FGL_GETENV("TERM") 将得到环境变量TERM的值。  
 ==============================================FGL_DRAWBOX(height, width, line, left-offset [, color ])  :  画方框。   
 ==============================================LENGTH(char_expr)   :  计算字符串表达式的长度，尾部空格不计在内。   
 ==============================================ASCII int_expr      :    得到ASCII值。   
 ==============================================
python教学_免费爬虫教学课程_实践课
广告 python，免费视频教学，手把手带你爬取任意网页内容，掌握核心，提升技术。 查看详情 >

char_expr CLIPPED  :  去掉字符串尾部的空格。这个操作符在参数传递和SQL语句中很有用。   
==============================================CURRENT   :    当前时间。格式为 YYYY/MM/DD hh:mm:ss 如 LET atime = CURRENT。  
==============================================TODAY   :   当前日期。   
==============================================DAY(date_expr)  :   
==============================================MONTH(date_expr)  :  
==============================================YEAR(date_expt )  :    分别返回日期格式参数中的日、月、年。data_expr 为DATE类型。  
==============================================WEEKDAY(date_expr)  :  返回日期变量是周几。  
==============================================，     :  逗号运算符能将两个以上的字符串连接起来。格式为 char_expr1 , char_expr2。   
==============================================expr IS NULL     :   
==============================================expr IS NOT NULL  :    判断表达式是否为空。   
阿里云python海量数据自由计算，发现数据价值!
广告 阿里云python支持千台集群的高并发毫秒级计算，提供权限管理，保证数据安全。 查看详情 >

==============================================LINENO     :   
==============================================PAGENO    :     只用在报表中，打印行号和页号。   
==============================================int_expr SPACE  :   
==============================================int_expr SPACES  :  用一定数量的空格代替手工输入的空格。  
==============================================expr USING format-string  :  格式化表达式。expr类型可以为smallint、decimal、float、date等。 


FGL内置函数大全
内置功能
摘要：
内置的功能是什么？
内置的功能列表
支持的功能列表
键代码表
另请参阅：效用函数，变量，函数，操作符，内置类。

-------------------------------------------------- ------------------------------
内置的功能是什么？
内置的函数是一个预定义的功能，在运行系统中提供自动链接到你的程序，库函数。您没有连接任何额外BDL库来创建你的程序。内置的功能是语言的一部分。
另请参见实用程序功能。
警告：
不要混淆内置的功能与SQ??L聚合函数，例如：
AVG（）
MAX（）
MIN（）
SUM（）
不要混淆内置的功能与运营商合作。一些运营商有相同的语法功能，但这些都是真正的的语言运营商，有特定的优先顺序。运营商可以在不同的上下文中，根据所使用的BDL语法。例如，见：
YEAR（日期）
MONTH（日期）
DAY（日期）
WEEKDAY（日期）
MDY（整型，整型，整型）
GET_FLDBUF（field）
INFIELD（field）
FIELD_TOUCHED（field）
-------------------------------------------------- ------------------------------
内置的功能列表
功能说明
ARG_VAL（）返回一个命令行参数的位置。
ARR_COUNT（）返回的数字输入程序中的阵列输入数组语句执行期间或之后的记录。
ARR_CURR（）返回当前行中的显示器阵列或输入数组。
DOWNSHIFT（）返回一个字符串值，其参数中的所有大写字符转换为小写。
ERRORLOG（）复制到错误日志文件作为参数传递的字符串。
FGL_BUFFERTOUCHED（）返回true，如果当前输入缓冲区被修改，因为该领域被选中。
FGL_DIALOG_GETFIELDNAME（）返回的电流输入字段的名称。
FGL_DIALOG_GETBUFFER（）返回当前字段的值是一个字符串。
FGL_DIALOG_GETBUFFERSTART（）当使用一个分页的显示器阵列，返回填充数组缓冲区的行偏移。
当使用分页显示阵列FGL_DIALOG_GETBUFFERLENGTH（），返回的行数填充数组缓冲区。
，FGL_DIALOG_INFIELD（）返回true，如果该字段作为参数传递的是当前输入字段中。
FGL_DIALOG_SETBUFFER（）设置当前字段的值作为一个字符串。
FGL_DIALOG_SETCURSOR（）设置当前字段内输入光标的位置。
FGL_DIALOG_GETCURSOR（）返回在当前字段的编辑光标的位置。
FGL_GETFILE（）将一个文件从前端的应用服务器的机器。
FGL_GETENV（）返回值的环境变量指定的名称作为参数。
FGL_GETVERSION（）返回运行时系统的内部版本号。
根据一些FGL_GETHELP（）返回帮助信息。
FGL_GETPID（）返回的系统进程ID。
FGL_GETRESOURCE（）返回的值的FGLPROFILE项目。
FGL_PUTFILE（）将一个文件从应用程序服务器计算机的前端。
FGL_SET_ARR_CURR（）设置的记录列表中的当前行。
FGL_SETENV（）设置的环境变量
FGL_SYSTEM（）启动一个程序时，在UNIX终端仿真器使用图形化的前端。
FGL_WIDTH（）返回代表字符串所需的列的数目。
length（）返回作为参数传递的字符串的字符数。
NUM_ARGS（）返回程序的参数的数量。
SET_COUNT（）指定数量的记录，其中包含一个静态数组中的数据。
使用showHelp（）显示运行时的帮助信息，对应其指定的参数，从当前的帮助文件。
STARTLOG（）初始化错误日志记录和打开的错误日志文件作为参数传递。
UPSHIFT()返回一个字符串值，其参数中的所有小写字符转换为大写。
ERR_GET（）返回的文本中对应的错误数。
ERR_PRINT（）打印错误行的文本对应的错误数。
ERR_QUIT（）打印错误行的文本中对应的错误数和终止程序。
FGL_DRAWBOX（）基于字符终端的坐标在当前打开的窗口中绘制一个矩形。
FGL_DRAWLINE（）画一条线基于字符终端坐标在当前打开的窗口。
FGL_KEYVAL（）返回的关键代码的逻辑或物理的关键。
FGL_LASTKEY（）返回最后按下的键由用户的关键代码。
SCR_LINE（）返回当前屏幕记录在它的屏幕阵列的数量。
FGL_DIALOG_GETKEYLABEL（）返回相关联的文本在目前的“互动式”教学的关键。
FGL_DIALOG_SETCURRLINE（）移动到记录列表中的特定行。
FGL_DIALOG_SETFIELDORDER（）启用或禁用字段顺序约束。
FGL_DIALOG_SETKEYLABEL（）设置相关的文本为当前的“互动式”教学的关键。
FGL_GETCURSOR（）返回在当前字段的编辑光标的位置。
FGL_GETWIN_HEIGHT（）返回在当前窗口的行数。
FGL_GETWIN_WIDTH（）返回当前窗口的宽度为列数。
FGL_GETWIN_X（）返回当前窗口的水平位置。
FGL_GETWIN_Y（）返回当前窗口的垂直位置。
FGL_GETKEYLABEL（）返回的默认标签相关联的一个关键。
FGL_REPORT_PRINT_BINARY_FILE（）打印一个文件，在一份报告中包含二进制数据。
FGL_REPORT_SET_DOCUMENT_HANDLER（）定义的文件处理程序，用于一份报告。
FGL_SETKEYLABEL（）设置的默认标签相关联的一个关键。
FGL_SETSIZE（）设置在主应用程序窗口的大小。
FGL_SETTITLE（）设置在主应用程序窗口的标题。
FGL_WINDOW_GETOPTION（）返回当前窗口的属性。
ORD（）返回一个字符表达式的第一个字节的ASCII值。
-------------------------------------------------- ------------------------------
列表支持的内置功能：
功能说明
FGL_FORMFIELD_GETOPTION（）返回一个指定的表单字段的属性。
FGL_GETKEY（）等待一个按键和返回键的代码。
FGL_GETUITYPE（）返回的类型的前端。
FGL_SCR_SIZE（）返回的电流的形式的屏幕的阵列的行的数目。
FGL_WINDOW_OPEN（）打开一个新窗口，坐标和大小。
FGL_WINDOW_OPENWITHFORM（）打开一个新的窗口与坐标和形式。
FGL_WINDOW_CLEAR（）清除窗口的名称作为参数传递。
FGL_WINDOW_CLOSE（）关闭窗口的名称作为参数传递。
FGL_WINDOW_CURRENT（）使当前窗口的名称作为参数传递。
-------------------------------------------------- ------------------------------
ARG_VAL（）
目的：
这个函数返回一个命令行参数的位置。
背景：
在程序中的任何地方。
语法：
，CALL ARG_VAL（位置INTEGER）返回的结果字符串
注：
位置的参数位置。 0返回该程序的名称，返回的第一个参数。
用途：
此功能提供了一种机制将值传递给该程序通过调用程序的命令行。期望或允许的程序的名称在命令行中的参数后，您可以设计一个程序。
像所有内置的功能中，ARG_VAL（）可以调用任何程序块。将值传递给主，不能有正式的参数，你可以用它，但你是不是仅限于从MAIN中调用ARG_VAL（）语句。您可以使用ARG_VAL的（）函数来检索程序执行过程中的各个参数。您也可以使用NUM_ARGS的（）函数来确定有多少参数按照程序名称在命令行上。
如果位置是大于0中，ARG_VAL（位置）返回所使用的命令行参数，在给定的位置。位置的值必须介于0和值返回NUM_ARGS（），命令行参数的数量。的表达ARG_VAL（0）返回的应用程序的名称。
另请参阅：NUM_ARGS（）。

-------------------------------------------------- ------------------------------
NUM_ARGS（）
目的：
这个函数返回的程序参数的数量。
背景：
在程序中的任何地方。
语法：
的CALL NUM_ARGS（）返回的结果INTEGER
注：
返回0，如果没有传递任何参数的程序。
另请参阅：ARG_VAL（）。

-------------------------------------------------- ------------------------------
SCR_LINE（）
目的：
这个函数返回当前屏幕记录在它的屏幕阵列的数量。
背景：
在显示器阵列或输入数组的声明。
语法：
：CALL SCR_LINE（）返回的结果INTEGER
注：
目前的战绩是线阵列，强调在开始的前行或行后第一个画面。
警告：
当使用新的图形对象，如表，这个函数可以返回一个无效的屏幕阵列产品线的数量，因为可能是不可见的，如果用户滚动列表中的带滚动条的当前行。
另请参阅：ARR_CURR（）。

-------------------------------------------------- ------------------------------
SET_COUNT（）
目的：
此函数指定包含在一个静态数组的数据的记录的数目。
背景：
在显示器阵列或输入数组的声明。
语法：
：CALL SET_COUNT（nbrows INTEGER）
注：
nbrows定义的行数，在静态数组。
使用此功能相当于输入数组的Count属性和显示器阵列报表。
用途：
当输入数组（与WITHOUT DEFAULTS条），或显示阵列语句中使用一个静态数组，你必须指定数组中的记录总数。在典型的应用中，这些记录包含一个SELECT语句返回一个数据库游标检索行中的值。您指定的行数与的SET_COUNT（）函数输入数组的Count属性和，显示阵列报表。
警告：使用动态数组时，你不必到指定的行数。当使用一个动态数组的行数定义阵列对象由getLength（）方法。
另请参阅：ARR_CURR FGL_SET_ARR_CURR（），（）。

-------------------------------------------------- ------------------------------
ARR_COUNT（）
目的：
这个函数返回的数字输入程序中的阵列输入数组语句执行期间或之后的记录。
背景：
被调用程序中的任何地方，但应仅限于使用内部或后输入数组块。
语法：
ARR_COUNT（）返回的结果INTEGER
注：
返回当前在当前的数组中存在的记录。
通常用于内输入数组块。
用途：
您可以使用ARR_COUNT（）的程序记录的数量来确定当前存储程序中的阵列。在典型的FGL应用，这些记录与检索数据库中的行从最近查询的结果集的值。先调用SET_COUNT的（）功能，或使用输入数组的Count属性，你可以设置一个上限ARR_COUNT（）返回的值。
ARR_COUNT（）返回一个正整数，对应于方案阵列内的用户??访问的最远的记录的索引。并非所有的行由ARR_COUNT（计数），不一定包含数据（例如，如果用户按下向下箭头键的次数超过有行数据）。
另请参阅：输入的ARRAY，ARR_CURR（）。

-------------------------------------------------- ------------------------------
ARR_CURR（）
目的：
这个函数返回当前行中的显示器阵列或输入数组。
背景：
在显示器阵列或输入数组的声明。
语法：
：CALL ARR_CURR（）返回的结果INTEGER
用途：
ARR_CURR（）函数返回一个整型值，用于标识当前行的行的列表中一个输入数组或显示阵列的指令。第一行编号为1。
当你调用一个函数，您可以通过ARR_CURR的（）作为参数。在这样的函数接收的参数的数组是被引用输入数组中的表或显示阵列的当前记录。
的ARR_CURR（）函数可以被用于强制一个循环开始超出数组的第一行通过设置变量到ARR_CURR（），和使用该变量的初始值for循环。
内置的功能ARR_CURR（）和SCR_LINE（）可以返回不同的值，如果该程序阵列是大于屏阵列。
另请参阅：输入数组，DISPLAY的ARRAY，ARR_COUNT（）SCR_LINE中，FGL_SET_ARR_CURR（），（）。

-------------------------------------------------- ------------------------------
ERR_GET（）
目的：
这个函数返回的文本中对应的错误数。
背景：
在程序中的任何地方。
语法：
：错误数INTEGER：CALL ERR_GET（）返回的结果STRING
注：
错误号是一个运行时错误或一个Informix SQL错误。
对于发展。
警告：
Informix的SQL错误号码只能支持，如果程序被连接到Informix数据库。
另请参阅：ERRORLOG（）中，STARTLOG（）中，ERR_QUIT（）中，ERR_PRINT（）“，”例外。

-------------------------------------------------- ------------------------------
ERR_PRINT（）
目的：
此功能打印错误行的文本对应的错误数。
背景：
在程序中的任何地方。
语法：
：CALL ERR_PRINT（错误数的整数）
注：
错误号是一个运行时错误或一个Informix SQL错误。
对于发展。
警告：
Informix的SQL错误号码只能支持，如果程序被连接到Informix数据库。
另请参阅：ERRORLOG（）中，STARTLOG（）中，ERR_QUIT（）中，ERR_GET（）“，”例外。

-------------------------------------------------- ------------------------------
ERR_QUIT（）
目的：
此功能打印错误行的文本中对应的错误号和终止程序。
背景：
在程序中的任何地方。
语法：
：CALL ERR_QUIT（错误数的整数）
注：
错误号是一个运行时错误或一个Informix SQL错误。
对于发展。
警告：
Informix的SQL错误号码只能支持，如果程序被连接到Informix数据库。
另请参阅：ERRORLOG（）中，STARTLOG（）中，ERR_QUIT（）中，ERR_GET（）“，”例外。

-------------------------------------------------- ------------------------------
ERRORLOG（）
目的：
这个函数的字符串复制到错误日志文件中的参数传递。
背景：
在程序中的任何地方。
语法：
CALL ERRORLOG（文本字符串）
注：
文字是在错误日志文件中要插入的字符串。
错误日志必须启动与STARTLOG（）。
另请参阅：STARTLOG（）例外。

-------------------------------------------------- ------------------------------
使用showHelp（）
目的：
这个函数的功能显示运行时的帮助信息，对应到其指定的参数，从当前的帮助文件。
背景：
在程序中的任何地方。
语法：
CALL的showHelp（帮助数INTEGER）
注：
帮助数是在当前的帮助文件中的帮助信息。
您当前的帮助文件，帮助文件的选项指令条款。
另请参阅：购股权，消息文件。

-------------------------------------------------- ------------------------------
STARTLOG（）
目的：
这个函数初始化错误日志记录，并打开错误日志文件作为参数传递。
背景：
在开始的程序。
语法：
：CALL STARTLOG（文件名字符串）
注：
文件名是错误日志文件的名称。
运行时错误自动报告。
ERRORLOG（）函数，您可以手动插入错误记录。
用途：
STARTLOG（）在主程序块打开或创建错误日志文件。 ，后STARTLOG（）被调用，你的程序的执行过程中出现的创纪录的每一个后续的错误写在错误日志文件中。如果您需要特定的应用程序错误报告，使用ERRORLOG（）函数的错误日志文件中的条目。
的错误记录，包括日期，时间，源模块的名称和行号，错误数和错误消息的默认格式。如果你调用的STARTLOG（）函数，以后每个错误添加到错误日志文件中的错误记录的格式如下：
日期：03/06/99时间：12:20:20
程序错误在的“stock_one.4gl”，行数89。
SQL语句错误-239。
无法插入新行 - 在唯一索引列的重复值。
系统错误号-100
ISAM错误：重复的值唯一键的记录。
STARTLOG（）和ERRORLOG（）函数可以用于插装一个程序，跟踪程序是如何被使用的。这种使用不仅是宝贵的改进方案，同时也为记录的工作习惯和检测企图破坏安全。
如果参数的STARTLOG的（）是没有名字的现有的文件，STARTLOG（）创建一个。如果该文件已经存在，STARTLOG（）打开它，所以后续的出错信息可以被附加到这个文件，将文件指针定位。下面的程序的片段调用STARTLOG的（），指定带引号的字符串，其中包括一个路径名和文件扩展名错误日志文件中的名称。该函数的定义包括一个内置的ERRORLOG（）函数，它增加了消息的错误日志文件的调用。
另请参阅：ERRORLOG（）例外。

-------------------------------------------------- ------------------------------
FGL_BUFFERTOUCHED（）
目的：
如果输入缓冲区被修改当前字段被选中后，该函数返回TRUE。
背景：
在输入完毕后，在后场，建设，ON键，在操作块。
语法：
调用FGL_BUFFERTOUCHED（）返回的结果INTEGER
注：
返回TRUE，如果输入缓冲区已触及后场选择。
警告：
此功能是不等价的FIELD_TOUCHED（）：返回FGL_BUFFERTOUCHED（）的标志被复位，当你进入一个新的领域，而FIELD_TOUCHED（）总是返回TRUE的“互动式”教学过程中被修改的。
另请参阅：FGL_DIALOG_SETBUFFER FGL_DIALOG_GETBUFFER（），（）。

-------------------------------------------------- ------------------------------
FGL_DIALOG_GETBUFFER（）
目的：
这个函数返回当前字段的值是一个字符串。
背景：
在CONSTRUCT指令后场块。
语法：
：CALL FGL_DIALOG_GETBUFFER（）返回的结果STRING
注：
返回当前场的输入缓冲器的内容。
仅在一个CONSTRUCT指令有用的，这是因为没有在这种情况下的字段相关联的变量。
另请参阅：FGL_DIALOG_SETBUFFER（），FGL_BUFFERTOUCHED（），GET_FLDBUF（）。

-------------------------------------------------- ------------------------------
FGL_DIALOG_SETBUFFER（）
目的：
该函数设置当前字段的值作为一个字符串。
背景：
在前场块的CONSTRUCT说明。
语法：
：CALL FGL_DIALOG_SETBUFFER（价值STRING）
注：
数值为文本设置在当前的输入缓冲器。
仅在一个CONSTRUCT指令有用的，这是因为没有在这种情况下的字段相关联的变量。
警告：
INPUT语句中使用时，此功能修改的输入缓冲器的当前场，相应的输入变量还没有被分配。这是没有意义的前场在输入语句块中调用该函数。
这个函数设置当前表单域的'感动'标志，'感动'标志的对话框。因此，FIELD_TOUCHED（）和FGL_BUFFERTOUCHED（）将返回TRUE，如果你调用这个函数。
另请参阅：FGL_DIALOG_GETBUFFER（），FGL_BUFFERTOUCHED（），GET_FLDBUF（）。

-------------------------------------------------- ------------------------------
FGL_DIALOG_GETFIELDNAME（）
目的：
此函数返回的电流输入字段的名称。
背景：
IN输入功能，输入数组，建造或显示阵列的指示。
语法：
FGL_DIALOG_GETFIELDNAME（）返回的结果STRING
注：
返回的电流输入字段的名称。
警告：
仅列返回的字段名。
另请参阅：FGL_DIALOG_INFIELD（）。

-------------------------------------------------- ------------------------------
FGL_DIALOG_INFIELD（）
目的：
这个函数返回TRUE，如果该字段作为参数传递是当前输入字段中。
背景：
IN输入功能，输入数组，建造或显示阵列的指示。
语法：
字段名的字符串：CALL FGL_DIALOG_INFIELD（）返回的结果INTEGER
注：
字段名是如果表单字段的名称。
警告：
仅列部分使用的字段名。
另请参阅：耕地（）。

-------------------------------------------------- ------------------------------
FGL_DIALOG_SETCURSOR（）
目的：
此功能设置在当前字段中输入光标的位置。
背景：
在互动指令。
语法：
的CALL FGL_DIALOG_SETCURSOR（指数INTEGER）
注：
指数是文本中的字符位置。
也：FGL_GETCURSOR（）。

-------------------------------------------------- ------------------------------
FGL_DIALOG_SETFIELDORDER（）
目的：
此功能可以启用或禁用字段顺序约束。
背景：
在程序开始时或前后输入指令。
语法：
：CALL FGL_DIALOG_SETFIELDORDER（积极INTEGER）
注：
积极为TRUE时，被约束的字段顺序。
积极为FALSE时，字段顺序没有限制。
用途：
典型的BDL应用程序的控制用户输入的前场和后场块。在许多情况下，以验证用户输入的数据的字段顺序和顺序执行后场块是很重要的。但随着图形化的前端，您可以用鼠标移动到一个领域。默认情况下，运行时系统执行所有的前场和后场块使用“互动式”教学等领域，从原始字段鼠标点击所选择的目标字段。如果需要的话，你可以强制运行时系统忽略所有的中间领域的触发器，通过调用此函数用假属性。

-------------------------------------------------- ------------------------------
FGL_DIALOG_SETCURRLINE（）
目的：
此功能移动到记录列表中的特定行。
背景：
在显示器阵列或输入数组的指令。
语法：
FGL_DIALOG_SETCURRLINE（排线INTEGER，INTEGER）
注：
在屏幕阵列，行是行的数量。
行是行数的数组变量。
警告：
在GUI模式下的行参数将被忽略。
您可以使用FGL_SET_ARR_CURR（）函数来代替。
控制块像以前那样在输入数组的行和场/行验证，如果用户移动到另一行，除了在显示之前或输入之前，当函数被调用。
-------------------------------------------------- ------------------------------
FGL_SET_ARR_CURR（）
目的：
此功能移动到记录列表中的特定行。
背景：
在显示器阵列或输入数组的指令。
语法：
：CALL FGL_SET_ARR_CURR（行INTEGER）
注：
行是行数的数组变量。
用途：
此功能通常用于控制导航的显示器阵列或输入数组。
当达到一个新行使用此功能，可编辑的第一个字段获得焦点。
控制块像以前那样在输入数组的行和场/行验证，如果用户移动到另一行，除了在显示之前或输入之前，当函数被调用。

-------------------------------------------------- ------------------------------
FGL_SETENV（）
目的：
该功能设置一个环境变量的值。
背景：
在程序中的任何地方。
语法：
：CALL FGL_SETENV（变量字符串，字符串值）
注：
变量是环境变量的名称。
值是要设置的值。
警告：
使用此功能在您自己的风险：如果你改变环境变量，当前程序已使用的，您可能会遇到意想不到的结果 - 例如，当您连接到，INFORMIX，你改变INFORMIXDIR环境变量。
有一个小的Windows和UNIX平台之间的差异，当传递一个NULL作为参数的值：在Windows中，环境变量被删除，而在UNIX上，环境变量得到一个空值（即，它不会从环境中删除）。
也：FGL_GETENV（）

-------------------------------------------------- ------------------------------
FGL_DRAWBOX（）
目的：
此功能基于字符终端上的坐标在当前打开的窗口中绘制一个矩形。
背景：
在程序中的任何地方。
语法：
：CALL FGL_DRAWBOX（高度，宽度，行，列，颜色INTEGER）
警告：
这个功能是为了向后兼容。
另请参阅：FGL_DRAWLINE（）。

-------------------------------------------------- ------------------------------
FGL_DRAWLINE（）
目的：
此功能基于字符终端上的坐标在当前打开的窗口中绘制一条直线。
背景：
在程序中的任何地方。
语法：
：CALL FGL_DRAWLINE（POSX，POSY，宽度，颜色INTEGER）
警告：
这个功能是为了向后兼容。
另请参阅：FGL_DRAWBOX（）。

-------------------------------------------------- ------------------------------
FGL_LASTKEY（）
目的：
这个函数返回最后按下的键由用户的关键代码。
背景：
任何“互动式”教学。
语法：
：CALL FGL_LASTKEY（）返回的结果INTEGER
注：
如果没有键被按下时，该函数返回NULL。
警告：
这个功能是为了向后兼容。
另请参阅：FGL_KEYVAL（）。

-------------------------------------------------- ------------------------------
FGL_KEYVAL（）
目的：
这个函数返回的关键代码的逻辑或物理的关键。
背景：
在程序中的任何地方。
语法：
：：CALL FGL_KEYVAL（字符串）返回的结果INTEGER
注：
字符可以是一个单一的字符，数字，可打印的符号，如@，＃，$或一个特殊的关键字。
关键词认可的FGL_KEYVAL（）：接受帮助，下一步，返回，DELETE，INSERT，下一页，右，下，中断，上一首，TAB，ESC，ESCAPE，左，页上一页，UP，F1到F64，控制字符（除了A，D，H，I，J，L，M，R，X）
如果你指定一个单一的字符，FGL_KEYVAL（）认为如此。在所有其他情况下，忽略的情况下，它的参数，它可以是大写或小写字母。
该函数返回NULL，如果该参数不符合一个有效的关键。
警告：
这个功能是为了向后兼容。
用途：
FGL_KEYVAL（）可以用来在表单相关的语句来检查的FGL_LASTKEY（）函数的返回值。
要确定用户是否执行了动作，如插入行，指定逻辑的动作名称（如插入），而不是物理的键（如F1）的名称。例如，逻辑名称的默认接受，关键是ESCAPE。要测试的关键最近由用户按下“接受”键，，指定FGL_KEYVAL（“ACCEPT”），而不是FGL_KEYVAL（“escape”）或FGL_KEYVAL（“ESC”）。否则，如果一个键以外ESCAPE设置为“接受”键，用户按下键，FGL_LASTKEY（）不返回代码等于FGL_KEYVAL的（“ESCAPE”）。FGL_LASTKEY（）返回的值是不确定的在MENU声明。
另请参阅：FGL_LASTKEY（）。

-------------------------------------------------- ------------------------------
FGL_REPORT_PRINT_BINARY_FILE（）
目的：
此功能打印文件在一份报告中包含二进制数据。
背景：
在一份报告程序。
语法：
公共认购FGL_REPORT_PRINT_BINARY_FILE（文件名字符串）
注：
filename是文件名的二进制文件。
警告：
这个功能是为了向后兼容。
-------------------------------------------------- ------------------------------
FGL_REPORT_SET_DOCUMENT_HANDLER（）
目的：
此功能下一份报告重定向到一个XML文件处理程序。
背景：
前/后执行的报告。
语法：
公共认购FGL_REPORT_SET_DOCUMENT_HANDLER（处理程序om.SaxDocumentHandler）
注：
处理程序是文件句柄变量。
-------------------------------------------------- ------------------------------
FGL_GETCURSOR（）/ FGL_DIALOG_GETCURSOR（）
目的：
这个函数返回在当前字段的编辑光标的位置。
背景：
在互动指令。
语法：
的CALL FGL_GETCURSOR（）返回指数INTEGER
注：
指数是文本中的字符位置。
也：FGL_DIALOG_SETCURSOR（）。

-------------------------------------------------- ------------------------------
FGL_GETWIN_HEIGHT（）
目的：
这个函数返回当前窗口的行数。
背景：
在程序中的任何地方。
语法：
的CALL FGL_GETWIN_HEIGHT（）返回的结果INTEGER
警告：
这个功能是为了向后兼容。
另请参阅：FGL_GETWIN_WIDTH（）。

-------------------------------------------------- ------------------------------
FGL_GETWIN_WIDTH（）
目的：
这个函数返回当前窗口的宽度为列数。
背景：
在程序中的任何地方。
语法：
：CALL FGL_GETWIN_WIDTH（）返回的结果INTEGER
警告：
这个功能是为了向后兼容。
另请参阅：FGL_GETWIN_WIDTH（）。

-------------------------------------------------- ------------------------------
FGL_GETWIN_X（）
目的：
这个函数返回当前窗口的水平位置。
背景：
在程序中的任何地方。
语法：
：CALL FGL_GETWIN_X（）返回的结果INTEGER
警告：
这个功能是为了向后兼容。
另请参阅：FGL_GETWIN_Y（）。

-------------------------------------------------- ------------------------------
FGL_GETWIN_Y（）
目的：
这个函数返回当前窗口的垂直位置。
背景：
在程序中的任何地方。
语法：
：CALL FGL_GETWIN_X（）返回的结果INTEGER
警告：
这个功能是为了向后兼容。
另请参阅：FGL_GETWIN_X（）。

-------------------------------------------------- ------------------------------
LENGTH（）
目的：
这个函数返回的字节数作为参数传递的表达。
背景：
在程序中的任何地方。
语法：
通话时长（表达式）返回的结果INTEGER
注：
expression是任何有效的表达式。
不计入尾随空格的字符串的长度。
如果该参数为NULL，则函数返回零。
警告：
该函数计算字节，而不是字符。在一个多字节的环境中，这是很重要的。
大多数数据库服务器支持相应的标量函数的SQL语言，但是从的FGL内置的功能，其结果可能是不同的。例如，Oracle的length（）函数返回NULL，当??字符串是空的。
另请参阅：FGL_WIDTH（）。

-------------------------------------------------- ------------------------------
FGL_GETVERSION（）
目的：
这个函数返回的运行??时系统的内部版本号。
背景：
在程序中的任何地方。
语法：
的CALL FGL_GETVERSION（）返回的结果字符串
警告：
只提供调试信息，请不要编写依赖于业务代码的版本号。
这个函数返回的版本号的格式是在未来的版本中的变化。
-------------------------------------------------- ------------------------------
FGL_GETHELP（）
目的：
根据它的标识符，返回的帮助文本阅读帮助文件。
背景：
在节目中，在任何一个地方的定义后，当前的帮助文件（OPTIONS帮助文件）。
语法：
，：CALL FGL_GETHELP（ID INTEGER）返回的结果字符串
注：
ID是帮助文本标识符。
另请参见：选项指令。

-------------------------------------------------- ------------------------------
FGL_GETPID（）
目的：
这个函数返回的系统进程标识符。
背景：
在程序中的任何地方。
语法：
：CALL FGL_GETPID（）返回的结果INTEGER
注：
由操作系统提供的进程标识符，它通常是独特的。
也：FGL_SYSTEM（）。

-------------------------------------------------- ------------------------------
FGL_DIALOG_GETBUFFERSTART（）
目的：
这个函数返回的页面，要养活一家分页显示阵列的行偏移量。
语法：
：CALL FGL_DIALOG_GETBUFFERSTART（）返回的结果INTEGER
用途：
请参阅显示器阵列。

-------------------------------------------------- ------------------------------
FGL_DIALOG_GETBUFFERLENGTH（）
目的：
这个函数返回的页面，要养活一家分页显示阵列的行数。
语法：
的CALL FGL_DIALOG_GETBUFFERLENGTH（）返回的结果INTEGER
用途：
请参阅显示器阵列。

-------------------------------------------------- ------------------------------
FGL_PUTFILE
目的：
将一个文件从应用程序服务器计算机的前端工作站。
语法：
fgl_putfile（字符串src，dst的STRING）
注：
src包含了发送的源文件的名称。
DST包含文件的文件名写的前端。
-------------------------------------------------- ------------------------------
FGL_GETFILE
目的：
将一个文件从前端工作站的应用程序服务器计算机。
语法：
fgl_getfile（字符串src，dst的STRING）
注：
src包含的文件的名称来检索从前端。
DST包含源文件的名称写在服务器端。
-------------------------------------------------- ------------------------------
FGL_GETENV（）
目的：
该函数返回值的环境变量指定的名称作为参数。
语法：
变量STRING：CALL FGL_GETENV（）返回的结果STRING
注：
变量是环境变量的名称。
如果指定的环境变量没有被定义，该函数返回一个NULL值。
如果环境变量的定义，但没有分配给它的值，该函数返回空格。
警告：
如果返回的值可以是一个长字符串，一定要声明有足够的大小来存储接收变量的字符函数的返回值。否则，该值将被截??断。
用途：
参数的FGL_GETENV的（）必须是一个环境变量的名称。如果被请求的值存在于当前用户环境，该函数返回它作为一个字符串，然后执行控制返回到调用上下文。
也：FGL_SETENV（）

-------------------------------------------------- ------------------------------
FGL_GETKEYLABEL（）
目的：
这个函数返回的默认标签相关联的一个关键。
语法：
：：CALL FGL_GETKEYLABEL（废弃的STRING）返回的结果STRING
注：
键名是一个逻辑名称的键，如F11或DELETE，INSERT，取消。
警告：
这个功能是为了向后兼容。
另请参阅：FGL_SETKEYLABEL FGL_DIALOG_GETKEYLABEL（），（）。

-------------------------------------------------- ------------------------------
FGL_SETKEYLABEL（）
目的：
此功能的默认设置相关的标签的关键。
语法：
：CALL FGL_SETKEYLABEL（键名字符串，标签STRING）
注：
键名是一个逻辑名称的键，如F11或DELETE，INSERT，取消。
标签是相关联的文本的关键。
警告：
这个功能是为了向后兼容。
另请参阅：FGL_SETKEYLABEL FGL_DIALOG_SETKEYLABEL（），（）。

-------------------------------------------------- ------------------------------
FGL_DIALOG_GETKEYLABEL（）
目的：
这个函数返回一个关键的“互动式”教学相关的标签。
语法：
：：CALL FGL_DIALOG_GETKEYLABEL（废弃的STRING）返回的结果STRING
注：
键名是一个逻辑名称的键，如F11或DELETE，INSERT，取消。
警告：
这个功能是为了向后兼容。
另请参阅：FGL_SETKEYLABEL FGL_DIALOG_SETKEYLABEL（），（）。

-------------------------------------------------- ------------------------------
FGL_DIALOG_SETKEYLABEL（）
目的：
该函数设置相关的标签的“互动式”教学的关键。
语法：
：CALL FGL_DIALOG_SETKEYLABEL（键名字符串，标签STRING）
注：
键名是一个逻辑名称的键，如F11或DELETE，INSERT，取消。
标签是相关联的文本的关键。
警告：
这个功能是为了向后兼容。
另请参阅：FGL_SETKEYLABEL FGL_DIALOG_GETKEYLABEL（），（）。

-------------------------------------------------- ------------------------------
FGL_SETSIZE（）
目的：
此功能设置主应用程序窗口的大小。
语法：
公共认购FGL_SETSIZE（INTEGER宽度，高度INTEGER）
注：
宽度的窗口中的列的数目。
高度是在窗口的行的数目。
警告：
这个功能是为了向后兼容。
另请参阅：FGL_SETTITLE（）。

-------------------------------------------------- ------------------------------
FGL_SETTITLE（）
目的：
此功能设置在主应用程序窗口的标题。
语法：
公共认购FGL_SETTITLE（标签STRING）
注：
标签的标题文本。
警告：
这个功能是为了向后兼容。
另请参阅：FGL_SETSIZE（）。

-------------------------------------------------- ------------------------------
FGL_SYSTEM（）
目的：
此函数启动一个程序时，在UNIX终端仿真器使用图形化的前端。
语法：
：CALL FGL_SYSTEM（命令字符串）
注：
命令是在服务器上执行的命令行。
警告：
这个功能是为了向后兼容。
用途：
该函数启动一个程序，需要一个UNIX终端仿真器，当使用Windows前端，即使没有可见的终端，目前的方案已经开始。命令参数是一个字符串或变量，它包含要执行的命令。 UNIX终端将提高和激活。当子进程结束后，终端会自动降低。
另请参阅：WINEXEC（）。

-------------------------------------------------- ------------------------------
FGL_WIDTH（）
目的：
这个函数返回的列数代表的印刷版本的表达。
背景：
在程序中的任何地方。
语法：
表达：CALL FGL_WIDTH（）返回的结果INTEGER
注：
expression是任何有效的表达式。
尾随空格的字符串的长度计算。
如果该参数为NULL，则函数返回零。
另请参阅：LENGTH（）。

-------------------------------------------------- ------------------------------
FGL_WINDOW_GETOPTION（）
目的：
这个函数返回当前窗口的属性。
语法：
的CALL FGL_WINDOW_GETOPTION（属性STRING）返回的结果字符串
注：
属性是一个窗口的属性的名称。这可以是一个名称的x，y，宽度，高度，formline，messageline。
警告：
这个功能是为了向后兼容。
-------------------------------------------------- ------------------------------
FGL_GETRESOURCE（）
目的：
这个函数返回的值的FGLPROFILE项。
背景：
在程序中的任何地方。
语法：
，CALL FGL_GETRESOURCE（名称字符串）返回的结果字符串
注：
名称是的FGLPROFILE要读取的条目名称。
如果该条目不存在的配置文件中，该函数返回NULL。
也FGLPROFILE定义。
警告：
FGLPROFILE条目名称不区分大小写。
-------------------------------------------------- ------------------------------
ORD（）
目的：
这个函数接受一个字符作为参数表达式，并返回该参数的第一个字节的整数值。
背景：
在程序中的任何地方。
语法：
CALL源STRING（ORD）返回的结果INTEGER
注：
源是一个字符串表达式。
此功能是区分大小写的。
只有第一个字节的参数进行了评价。
如果传入的参数是无效的，则返回NULL。
对于默认（美国英语）的语言环境中，这个功能是ASCII（）运算符的逻辑反。
另请参阅也：FGL_KEYVAL的ASCII（），（）。

-------------------------------------------------- ------------------------------
DOWNSHIFT( )
目的：
这个函数的返回值返回一个字符串值，其参数中的所有大写字符转换为小写。
背景：
在程序中的任何地方。
语法：
CALL DOWNSHIFT( )（源字符串），返回的结果字符串
注：
源是字符串转换为小写字母。
非字母或小写字符都不会改变。
警告：
转换取决于区域设置（LC_CTYPE环境变量）。
另请参阅：UPSHIFT( )。

-------------------------------------------------- ------------------------------
UPSHIFT( )
目的：
这个函数返回一个字符串值，其参数中的所有小写字符转换为大写。
背景：
在程序中的任何地方。
语法：
CALL UPSHIFT( )（来源STRING）返回的结果字符串
注：
源是字符串转换为大写字母。
非字母字符或大写字符不会改变。
警告：
转换取决于区域设置（LC_CTYPE环境变量）。
另请参阅： DOWNSHIFT( )。

-------------------------------------------------- ------------------------------
键代码表 在这两个方法中使用 FGL_LASTKEY( ) FGL_KEYVAL( )
值键名称说明
1至26 控制-X 控制键，其中x是任何字母从A到Z的关键代码对应的控制-A是1，B是2等
其他<256 ASCII字符 代码对应的ASCII字符集。
2000 上 向上箭头逻辑的关键。
2001 下 向下箭头逻辑的关键。
2002 左 左箭头逻辑的关键。
2003 右 右箭头合乎逻辑的关键。
2005 下一页 下一页合乎逻辑的关键。
2006 上一页 上页合乎逻辑的关键。
2008 帮助 帮助合乎逻辑的关键。
2011 中断 中断的中断逻辑。
2012 home home逻辑的关键。
2013 end 结束的结束逻辑的关键。
2016 accept 接受接受逻辑的关键。
2017 backspace 退格键退格键合乎逻辑的关键。
3000至3255的 FX Fx的功能键，其中x是功能键的数目。 3000 + x-1的，例如，3011至F12相对应的键码对应于一个功能键Fx的。

